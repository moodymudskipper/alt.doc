% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getNamespaceInfo.R
\name{getNamespaceInfo}
\alias{getNamespaceInfo}
\alias{.getNamespaceInfo}
\title{getNamespaceInfo}
\usage{
getNamespaceInfo(ns, which)

.getNamespaceInfo(ns, which)
}
\arguments{
\item{ns}{for \code{getNamespaceInfo()} a namespace or a string, for \code{.getNamespaceInfo()} a namespace}

\item{which}{A string, the name of the component to extract. In non artificial cases
should be one of "dynlibs", "exports", "imports", "lazydata", "nativeRoutines",
"path", "S3methods", "spec"}
}
\description{
Fetch a component of the namespace info. \code{.getNamespaceInfo()} and \code{getNamespaceInfo()}
are very similar, the difference is that \code{getNamespaceInfo()} can take a namespace
name rather than an environment and fails if provided "base" or the base namespace
(it is thus slower due to those overheads).
}
\section{Components}{


Technically any \code{getNamespaceInfo()} could access any item define in \code{ns[[".__NAMESPACE__."]]}
(e.g. through \code{setNamespaceInfo()}) but in practice the namespace info is made
from the following components:

\strong{DLLs}

The only optional item, present only if the package contains compiled code.

A one element list, generally named as the namespace (for some
reason for the package {data.table} it is named "datatable" without the "."),
containing a "DLLInfo" object.

"DLLInfo" objects are lists containing :
\itemize{
\item name : A string, identical to the name of \code{DLLs}
\item path : A path to a ".so" file
\item dynamicLookup : A boolean
\item handle : A pointer
\item info : A pointer
}

\strong{dynlib}

Either an empty character if \code{DLLs} is absent, or a string containing \code{DLLs}'s
name and named as "".

\strong{exports}

An environment, child of the base environment, containing the names of the
package's exported functions, stored as strings named as themselves.

\strong{imports}

A list containing elements named as the packages imported from. Each element
is a vector of object names named as itself.

An exception is the first element named "base", which seems to always be set to \code{TRUE}.

\strong{lazydata}

An environment containing the datasets to be lazily loaded, with a name attribute
named as "lazydata:namespace.name" (where "namespace.name" is to be replaced by the namespace name)

\strong{nativeRoutines}

An empty list if \code{DLLs} is absent or a one element list, named as \code{DLLs} and
containing the name of the C routines defined in the package.

\strong{path}

The path to the package folder in the library.

\strong{S3methods}

A 4 column matrix describing the S3 methods registered by the package.
The columns are not named but describe in that order the generic's name,
the S3 class, and the S3 method's name- the 4th column seems to always be
\code{NA_character_}, it might be there for historical reasons.

\strong{spec}

A named character vector with elements :
\itemize{
\item name: the package's name
\item version : the package's version, for base packages the R version
}
}

\section{History}{

\code{.getNamespaceInfo()} was introduced in R 3.2.0 with the following note:

"New function \code{.getNamespaceInfo()}, a no-check version of \code{getNamespaceInfo()}
mostly for internal speedups."
}

\examples{
getNamespaceInfo("stats", "spec")

# the code
getNamespaceInfo
.getNamespaceInfo
}

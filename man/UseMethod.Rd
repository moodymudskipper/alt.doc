% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UseMethod.R
\name{UseMethod}
\alias{UseMethod}
\title{Class Methods}
\usage{
UseMethod(generic, object)
}
\arguments{
\item{generic}{a character string naming a function (and not a
    built-in operator).  Required for \code{UseMethod}.}

\item{object}{for \code{UseMethod}: an object whose class will
    determine the method to be dispatched.  Defaults to the first
    argument of the enclosing function.}
}
\description{
This page teaches the S3 scheme through simple examples, it covers most of the common
cases. Refer to the canonical documentation or to \href{https://adv-r.hadley.nz/s3.html}{Advanced R} for deeper insights.
}
\examples{
x <- structure("Buddy", class = "dog")
y <- structure("Rex", class = c("angry_dog", "dog"))
z <- structure("Kitty", class = "cat")

# generic, always include the `...` (good practice)
say_what <- function(x, loud = FALSE, ...) {
  # we can add checks here, or even transform arguments (less usual)
  stopifnot(is.character(x))
  UseMethod("say_what")
  # code after UseMethod won't be run
  stop("this won't happen")
}

# methods should have at least the same arguments (good practice)
say_what.dog <- function(x, loud = FALSE, ...) {
 message(x, ": ", if (loud) "WOOF" else "woof")
}
say_what(x)
say_what(y)
say_what(y, loud = TRUE)

# you might add args specific to your method, these will be passed to the generics through dots
say_what.cat <- function(x, loud = FALSE, times = 1, ...) {
 message(x, ": ", rep(if (loud) "MEOW" else "meow", times))
}
say_what(z)
say_what(z, times = 3)

# oops,we don't have a default method
try(say_what("Birdie"))

say_what.default <- function(x, loud) {
  message(x, ": ...")
}
say_what("Birdie")

# now let's set a specific action for angry dogs
say_what.angry_dog <- function(x, loud = FALSE, ...) {
 message(x, ": ", "rrrrr...")
 message(x, ": ", if (loud) "WOOF" else "woof")
}
say_what(y)

# or using NextMethod()
say_what.angry_dog <- function(x, loud = FALSE, ...) {
 message(x, ": ", "rrrrr...")
 NextMethod(loud = TRUE)
}
# same thing
say_what(y)


}
